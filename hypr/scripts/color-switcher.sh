#!/bin/bash

# Cyberpunk Color Theme Switcher
# Switches between predefined color schemes while maintaining the aesthetic

SCRIPTS_DIR="$HOME/.config/hypr/scripts"
HYPR_DIR="$HOME/dotfiles/hypr"

# Predefined cyberpunk color schemes
declare -A THEMES=(
    ["purple"]="bb9af7 7aa2f7"    # Your current purple/blue
    ["neon"]="ff007f 00ffff"      # Hot pink/cyan 
    ["matrix"]="00ff41 39ff14"    # Classic matrix green
    ["fire"]="ff6b35 f7931e"      # Orange/red cyberpunk
    ["ice"]="64b5f6 42a5f5"       # Cool blues
    ["toxic"]="76ff03 b2ff59"     # Toxic green
)

# Function to apply theme colors to Hyprland
apply_theme() {
    local theme_name="$1"
    local colors=(${THEMES[$theme_name]})
    local color1="${colors[0]}"
    local color2="${colors[1]}"
    
    if [ -z "$color1" ] || [ -z "$color2" ]; then
        echo "Invalid theme: $theme_name"
        return 1
    fi
    
    # Update hyprland config with new colors
    sed -i "s/col.active_border = rgba([^)]*)/col.active_border = rgba(${color1}ff) rgba(${color2}ff) 45deg/" "$HYPR_DIR/hyprland.conf"
    sed -i "s/col.nogroup_border_active = rgba([^)]*)/col.nogroup_border_active = rgba(${color1}ff)/" "$HYPR_DIR/hyprland.conf"
    
    # Create pywal colors file for manual theme
    mkdir -p ~/.cache/wal
    cat > ~/.cache/wal/colors.sh << EOF
#!/bin/sh
# Generated by color-switcher.sh - $theme_name theme

# Special
background='#1a1b26'
foreground='#c0caf5'
cursor='#${color1}'

# Colors
color0='#1a1b26'
color1='#f7768e'
color2='#9ece6a'
color3='#e0af68'
color4='#${color2}'
color5='#${color1}'
color6='#7dcfff'
color7='#c0caf5'
color8='#414868'
color9='#f7768e'
color10='#9ece6a'
color11='#e0af68'
color12='#${color2}'
color13='#${color1}'
color14='#7dcfff'
color15='#c0caf5'

# FG
fg='#c0caf5'

# BG
bg='#1a1b26'
EOF

    # Update waybar with theme colors
    update_waybar_theme "$color1" "$color2"
    
    # Reload hyprland config
    hyprctl reload
    
    # Restart waybar
    killall waybar 2>/dev/null
    sleep 0.5
    waybar &
    
    # Notification
    if command -v notify-send &> /dev/null; then
        notify-send "Theme Changed" "Applied $theme_name cyberpunk theme" -t 2000
    fi
    
    echo "Applied $theme_name theme (${color1}, ${color2})"
}

# Function to update waybar colors
update_waybar_theme() {
    local color1="$1"
    local color2="$2"
    
    # Update the waybar style with new accent colors
    cat > /tmp/waybar-theme.css << EOF
/* Dynamic theme colors */
#workspaces button.active {
    background: linear-gradient(45deg, #${color1}, #${color2}) !important;
}

#workspaces button:hover {
    background: #${color1}33 !important;
    color: #${color1} !important;
}

#custom-logo {
    background: linear-gradient(45deg, #${color1}, #${color2}) !important;
}

#cpu { color: #${color2} !important; }
#memory { color: #${color1} !important; }
#custom-gpu { color: #${color2} !important; }
#network { color: #${color2} !important; }
#pulseaudio { color: #${color1} !important; }
EOF

    # Append to existing waybar style
    if [ -f "/home/jeffaf/dotfiles/waybar/style.css" ]; then
        cat /tmp/waybar-theme.css >> /home/jeffaf/dotfiles/waybar/style.css
    fi
}

# Function to show theme picker
show_theme_picker() {
    local themes_list=""
    for theme in "${!THEMES[@]}"; do
        themes_list="$themes_list$theme\n"
    done
    
    echo -e "$themes_list" | sort | wofi --dmenu --prompt "Choose theme:" --cache-file=/dev/null | while read -r chosen; do
        if [ -n "$chosen" ]; then
            apply_theme "$chosen"
        fi
    done
}

# Function to cycle through themes
cycle_theme() {
    local theme_list=($(printf '%s\n' "${!THEMES[@]}" | sort))
    local current_theme_file="$HOME/.cache/current_theme"
    local current_theme=""
    
    if [ -f "$current_theme_file" ]; then
        current_theme=$(cat "$current_theme_file")
    fi
    
    local next_index=0
    for i in "${!theme_list[@]}"; do
        if [ "${theme_list[$i]}" = "$current_theme" ]; then
            next_index=$(( (i + 1) % ${#theme_list[@]} ))
            break
        fi
    done
    
    local next_theme="${theme_list[$next_index]}"
    apply_theme "$next_theme"
    echo "$next_theme" > "$current_theme_file"
}

# Main execution
case "${1:-picker}" in
    "picker")
        show_theme_picker
        ;;
    "cycle")
        cycle_theme
        ;;
    "purple"|"neon"|"matrix"|"fire"|"ice"|"toxic")
        apply_theme "$1"
        echo "$1" > "$HOME/.cache/current_theme"
        ;;
    *)
        echo "Usage: $0 {picker|cycle|purple|neon|matrix|fire|ice|toxic}"
        echo "Available themes:"
        for theme in "${!THEMES[@]}"; do
            echo "  - $theme: ${THEMES[$theme]}"
        done
        ;;
esac